<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
    <!--    配置SpringMvc-->
    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射,解决@ResponseBody乱码问题, 需要在annotation-driven之前,否则乱码问题同样无法解决 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>application/json;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>
    <!--    定义异常处理类-->

    <bean id="exceptionResolver" class="top.xiao.utils.common.utils.CustomSimpleMappingExceptionResolver">
        <!--        异常信息变量名配置异常的属性值为ex，那么在错误页面中够可以通过${ex}来获取异常-->
        <property name="exceptionAttribute" value="ex"></property>
        <!--        需要做特殊处理的异常，用类名或者完全路径作为key，异常页面作为值-->
        <property name="exceptionMappings">
            <props>
                <prop key="top.xiao.utils.common.ex.LoginFailException"></prop>
            </props>
        </property>

    </bean>
    <!--    1.开启SpringMVC注解模式-->
    <!-- 简化配置：
    (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter
    (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持
-->
    <mvc:annotation-driven/>
    <!--    静态资源默认servlet配置-->
    <!--    1.加入对静态资源的处理，js,gif,png
            2.允许使用“/"做整体映射
    -->
    <mvc:default-servlet-handler/>
    <!--    配置jsp，显示ViewResolver-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
          p:defaultEncoding="UTF-8">
        <property name="maxUploadSize" value="2097152"/>
        <property name="resolveLazily" value="true"/>
    </bean>


    <!--    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
            &lt;!&ndash;        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>&ndash;&gt;
            <property name="prefix" value="/WEB-INF/jsp/"/>
            <property name="suffix" value=".jsp"/>
            <property name="contentType" value="text/html;charset=UTF-8"/>
            <property name="order" value="2"></property>
        </bean>-->

    <!--配置 html 视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/html/"/>
        <property name="suffix" value=".html"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="order" value="2"></property>
    </bean>
    <!--向容器自动注入配置-->
    <context:annotation-config/>
    <!--    扫描Controller类-->
    <context:component-scan
            base-package="top.xiao.controller,top.xiao.utils,top.xiao.listener,top.xiao.manager.controller"/>
    <mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/"/>
    <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/>

</beans>